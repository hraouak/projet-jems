# -*- mode: ruby -*-
# vi: set ft=ruby :

# Port forwarding configurations
port_forwarding = {
  "HSHTTP" => { guest: 19888, host: 19888 },
  "HSUISecure" => { guest: 19890, host: 19890 },
  "HiveServer" => { guest: 10000, host: 10000 },
  "HiveServer2" => { guest: 10001, host: 10001 },
  "Httpfs" => { guest: 14000, host: 14000 },
  "HueBeeswax" => { guest: 8002, host: 8002 },
  "HueWeb" => { guest: 8888, host: 8888 },
  "JobTrackerUI" => { guest: 50030, host: 50030 },
  "NodeManagerUI" => { guest: 8042, host: 8042 },
  "Oozie" => { guest: 11000, host: 11000 },
  "OozieHTTPS" => { guest: 11443, host: 11443 },
  "ResourceManagerUI" => { guest: 8088, host: 8088 },
  "SecureNodeManagerUI" => { guest: 8044, host: 8044 },
  "SecureResourceManagerUI" => { guest: 8090, host: 8090 },
  "SparkApplication" => { guest: 7077, host: 7077 },
  "SparkDriver" => { guest: 4040, host: 4040 },
  "SparkHistory" => { guest: 18080, host: 18080 },
  "SparkMaster" => { guest: 8080, host: 8080 },
  "SparkWorker" => { guest: 8081, host: 8081 },
  "Sqoop2Server" => { guest: 12000, host: 12000 },
  "TaskTrackerUI" => { guest: 50060, host: 50060 },
  "YarnJobSubmission" => { guest: 8032, host: 8032 },
  "YarnTimeline" => { guest: 8188, host: 8188 },
  "YarnTimelineSecure" => { guest: 8190, host: 8190 },
  "cldbweb" => { guest: 7221, host: 7221 },
  "drill" => { guest: 8047, host: 8047 },
  "drillbit" => { guest: 31010, host: 31010 },
  "maprfs" => { guest: 5660, host: 5660 },
  "mcs" => { guest: 8443, host: 8443 },
  "nfs" => { guest: 2049, host: 2049 },
  "nfs2" => { guest: 111, host: 111 },
  "nfsmgmt" => { guest: 9998, host: 9998 },
  "nfsmon" => { guest: 9997, host: 9997 },
  "ssh" => { guest: 22, host: 2222 },
}

Vagrant.configure("2") do |config|
  config.vbguest.auto_update = false
  config.ssh.username = "mapr"
  config.ssh.password = "mapr"
  config.ssh.insert_key = true
  config.vm.define "vm-projet" do |vm|
    vm.vm.box = "mapr-test"
    port_forwarding.each do |name, ports|
      vm.vm.network "forwarded_port", guest: ports[:guest], host: ports[:host], name: name
    end
  end
end


  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Disable the default share of the current code directory. Doing this
  # provides improved isolation between the vagrant box and your host
  # by making sure your Vagrantfile isn't accessable to the vagrant box.
  # If you use this you may want to enable additional shared subfolders as
  # shown above.
  # config.vm.synced_folder ".", "/vagrant", disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
